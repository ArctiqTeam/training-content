header:
    author: Rackspace and Ansible
    description: Ansible Fundamentals
    title: Ansible Fundamentals
slides:
-   -   nested:
        -   -   h1: Advanced Ansible
        -   -   h2: Learning Objectives
            -   p: Students will be able to understand
            -   p: "<ul>\n  <li>Configuration Entries</li>\n  <li>Different connection\
                    \ methods</li>\n  <li>Variable types and precedences</li>\n  <li>Dynamic\
                    \ Inventories</li>\n  <li>Encrypted data for use within Ansible</li>\n\
                    \  <li>Roles</li>\n  <li>Task Delegatation</li>\n  <li>Jinja2\
                    \ Templates</li>\n</ul>\n"
-   -   nested:
        -   -   h1: Assessment Questions
            -   link:
                - http://bit.ly/ansible_advanced
                - http://bit.ly/ansible_advanced
-   set_global:
        background: '#007777'
        transition: rotate
-   -   nested:
        -   -   h1: Configuration Files
            -   class_notes: "Configuration files accept configuration directives\
                    \ to modify\nthe way Ansible runs, for example: configuring a\
                    \ specific \nconnection type, or to set the number of forks.\n"
        -   -   h3: File locations
            -   ul:
                - ansible.cfg (in the current directory)
                - .ansible.cfg (in the home directory)
                - /etc/ansible/ansible.cfg
            -   class_notes: 'These are the three locations where configuration files
                    are kept.

                    The configuration files in these locations are read and evaluated

                    in an order of precedence.  The system file in /etc/ansible/ansible.cfg

                    has the lowest precedence, the "~/.ansible.cfg" is next highest,
                    and

                    "./ansible.cfg" is the highest precedence.

                    '
        -   -   h3: Environment Variables
            -   code: 'ANSIBLE_KEEP_ALL_FILES=True ansible -i hosts ...

                    '
            -   class_notes: 'Environment variables have the highest precedence of
                    all, and work similarly

                    to configuration directives in config files

                    '
        -   -   h3: Environment Variables
            -   ul:
                - Highest precedence
                - Enviroment variables & configuration directives
                - constants.py
            -   class_notes: 'An enviroment variable is going to squash configuration
                    directives

                    at all levels.  Important to note: enviroment variables do not
                    always

                    have an equivalent configuration directive.

                    Enviroment variables are not well documented, and are, for the
                    most part

                    documented only in code, in the "constants.py" file inside Ansible

                    '
        -   -   h3: Configuration Sections
            -   ul:
                - defaults
                - paramiko
                - ssh_connection
                - accelerate
            -   class_notes: 'Each of the bullets are a "section" under which their
                    respective directives

                    should be used.  The config file uses INI format.

                    '
        -   -   h3: Configuration Sections
            -   code: '$ cat ansible.cfg

                    [defaults]

                    ...

                    '
            -   class_notes: 'Sections are literally section headers for INI files.
                    Configuration

                    directives for each section are placed under their appropriate,

                    respective section header.

                    '
        -   -   h3: Configuration Options
            -   p: Each section has its own directives
            -   code: '[defaults]

                    hostfile = hosts

                    private_key_file = ~/.ssh/id_rsa

                    ...

                    '
            -   class_notes: 'The directives are defined under their respective section.

                    The Ansible documentation provides all the configuration directives

                    for each section.

                    '
        -   -   h3: Configuration Options
            -   link:
                - http://docs.ansible.com/intro_configuration.html
                - http://docs.ansible.com/intro_configuration.html
        -   -   h3: Example Configuration
            -   code: '[defaults]

                    hostfile = hosts

                    private_key_file = /Users/username/.ssh/id_rsa

                    nocows = 1

                    forks = 50

                    transport = ssh

                    remote_user = ansibleuser

                    ask_sudo_pass = True

                    ask_vault_pass = True

                    roles_path = roles


                    [ssh_connection]

                    pipelining = True

                    scp_if_ssh = True

                    '
            -   class_notes: "This is configuration file that was made to ensure Ansible\
                    \ complies\nwith the local environment configuration.  For example,\
                    \ it explictly \nforces ssh, asks for a sudo pass, sets forks\
                    \ to 50, etc.\n"
        -   -   h3: Config File Tour
            -   class_notes: 'Students check their config files

                    '
-   -   nested:
        -   -   h1: Connection Types
            -   class_notes: Title slide. Ansible has a number of ways to connect
                    to remote machines. SSH is the default, and there are two SSH
                    mechanisms. This chapter will cover the differences between the
                    two, as well as other connection mechanisms.
        -   -   h1: Smart (SSH auto-detected)
            -   p: placeholder for diagram to show smart, openssh, and paramiko?
            -   class_notes: By default, Ansible auto-detects the right SSH-based
                    connection mechanism to use. There are two, Paramiko and OpenSSH.
                    Paramiko is used when your version of OpenSSH on the control machine
                    is too old to support "Control Persist/Control Master", which
                    greatly improve connection performance. Ubuntu has a modern version
                    of OpenSSH, but CentOS/RHEL6 do not.
        -   -   h1: OpenSSH
            -   class_notes: With the OpenSSH connection type, you can use regular
                    SSH configuration use things like jump hosts to bounce from one
                    host to another, Kerberos authentication, and any other SSH configuration
                    that you need. OpenSSH also supports control master/control persist
                    which improves the performance of multiple connections to the
                    same machine, which is useful for Ansible.
        -   -   h1: Pipelining
            -   class_notes: If you're using OpenSSH, you can enable pipelining, which
                    greatly increases SSH performance. It is enabled in the ansible.cfg
                    configuration file. Pipelining is disabled by default because
                    it requires a little bit of target machine configuration for sudo.
                    You must  disable ‘requiretty’ in /etc/sudoers on all managed
                    hosts.
        -   -   h1: Paramiko
            -   class_notes: Paramiko is a very simple Python implementation of an
                    SSH client. Ansible uses it as a fallback when the version of
                    OpenSSH on the control machine is not suitable. It doesn't support
                    the advanced OpenSSH configuration like jump hosts, etc.
        -   -   h1: Accelerated Mode
            -   p: http://docs.ansible.com/playbooks_acceleration.html
            -   class_notes: Accelerated mode is a special kind of connection that
                    sets up a temporary listener on the target server and then bypasses
                    SSH using a special encrypted connection to run the rest of the
                    tasks without having to establish a new SSH connection every time.
                    It is about as fast as pipelined SSH, but it can have some additional
                    performance benefits if you are transferring a lot of large files
                    to the target systems.
        -   -   h1: Local Connections
        -   -   h1: Connection Plugins
-   -   nested:
        -   -   h1: Jinja2 Templates
            -   p: I mustache you a question.
        -   -   h2: Jinja2 Templates
            -   ul:
                - Delimiters
                - Control Structures
                - Jinja2 Environment
                - Python Data Types
                - Filters and Tests
        -   -   h2: Delimiters
            -   code: '{{ variable }}

                    '
            -   code: '{% for server in groups.webservers %}

                    '
            -   class_notes: There are 2 (default) delimiters in jinja2. The first
                    prints the result of the expression. The latter is used to execute
                    statements such as for loops or assigning values.
        -   -   h2: Control Structures
            -   p: "<ul>\n  <li>for</li>\n  <li>if</li>\n  <li>macros</li>\n  <li>call</li>\n\
                    \  <li>filters</li>\n  <li>assignments</li>\n  <li>extends</li>\n\
                    \  <li>block</li>\n  <li>include</li>\n  <li>import</li>\n</ul>\n"
            -   class_notes: This is a list of all control strucutres as mentioned
                    in the jinja2 docs.  The ones most people need to know about are
                    "for" and "if".  Point students to <a href="http://jinja.pocoo.org/docs/templates/">http://jinja.pocoo.org/docs/templates/</a>
                    for additional information about the other types.
        -   -   h2: For Loop
            -   code: '{% for server in groups.webservers %}

                    {{ hostvars[server].ansible_default_ipv4.address }}

                    {% endfor %}

                    '
            -   class_notes: Ending a control structure in jinja2 is generally done
                    with endTYPE, where TYPE in the above case is "for".
        -   -   h2: If Statement
            -   code: '{% if server == inventory_hostname %}

                    {{ 127.0.0.1 }}

                    {% else if server in groups.database %}

                    {{ hostvars[server].ansible_eth1.address }}

                    {% else %}

                    {{ hostvars[server].ansible_default_ipv4.address }}

                    {% endif %}

                    '
            -   class_notes: This is an example of an if/else if/else statement, nothing
                    too special here.
        -   -   h2: Accessing Variables from Other Hosts
            -   p: The "hostvars" variable contains facts for all hosts that have
                    had facts gathered.
            -   code: hostvars['web01'].ansible_eth1.address
            -   class_notes: Group variables are not held independent of the hosts.
                    During inventory parsing, group vars are merged into the individual
                    hosts facts.
        -   -   h2: Manipulating Jinja2 Environment
            -   p: Ansible configures jinja2 with a set of sane defaults. In some
                    cases these defaults are not optimal, usually in the case of variable_start_string
                    or trim_blocks. The first line of a jinja2 template can include
                    a jinja2 environment configuration line
            -   code: '#jinja2:variable_start_string:''[%'' , variable_end_string:''%]''

                    '
            -   class_notes: This example shows changing "{{ ... }}" to "[% ... %]".
                    This is valuable in the case where you may need to use the "{{"
                    or "}}" strings in your template that are not part of jinja2.
                    <a href="http://jinja.pocoo.org/docs/api/#jinja2.Environment">http://jinja.pocoo.org/docs/api/#jinja2.Environment</a>
        -   -   h2: Jinja2 Variables are Python Data Types
            -   p: In some cases there will not be Jinja2 filters that do what you
                    want, such as a lack of a "split" filter. This can be achieved
                    using the ".split()" method on a python string object.
            -   code: '{% set servers = "server1,server2,server3" %}

                    {% for server in servers.split(",") %}

                    {{ server }}

                    {% endfor %}

                    '
        -   -   h2: Filters and Tests
            -   p: Jinja2 provides you with a number of filters and tests to manipulate
                    and test data. Ansible also provides a number of filters.
            -   link:
                - http://docs.ansible.com/playbooks_variables.html#jinja2-filters
                - http://docs.ansible.com/playbooks_variables.html#jinja2-filters
        -   -   h2: Filters
            -   p: Filters are invoked similarly to unix shell pipes and manipulate
                    variables and return the results
            -   code: 'variable | replace("-", "_")

                    '
            -   class_notes: Additional details can be found at <a href="http://jinja.pocoo.org/docs/templates/#filters">http://jinja.pocoo.org/docs/templates/#filters</a>
        -   -   h2: Tests
            -   p: Tests can be used to test a variable against a common expression
            -   code: '{% if variable is defined %}

                    '
            -   class_notes: Additional details can be found at <a href="http://jinja.pocoo.org/docs/templates/#tests">http://jinja.pocoo.org/docs/templates/#tests</a>
-   -   nested:
        -   -   h1: Variable Types and Precedence
            -   p: What is your variable and where does it go?
        -   -   h2: Where variables are defined or sourced
            -   ul:
                - Inventory
                - Playbook
                - Files and Roles
                - Command Line
                - Facts
            -   class_notes: 'This chapter will be about Variable Types and Precedence.

                    It will also touch a bit on Jinja2 and Roles.

                    '
        -   -   h2: Variable Precedence
            -   p: 'Variables will override each other depending on where they are
                    defined:'
            -   ol:
                - Command line variables have the highest precedence.
                - '''most everything else'' come next.'
                - Variables defined in inventory.
                - Next comes facts discovered about a system.
                - Role defaults lose in priority to everything else.
            -   class_notes: 'Ansible says you shouldn''t really care about variable
                    precedence.

                    Put things where you want, and it should ''just work''.

                    '
        -   -   h2: Defining Variables
            -   p: Let's go over the various locations you can define variables.
            -   class_notes: 'The next slides will contain details on the various
                    variable locations.

                    '
        -   -   h2: Inventory
            -   p: 'There are a couple of methods for defining variables in your inventory:'
            -   code: 'localhost ansible_connection=local


                    [web]

                    web1.example.com ansible_ssh_port=5555 ansible_ssh_host=192.168.1.50

                    web2.example.com ansible_ssh_user=mdehaan


                    [db]

                    db01.example.com mysql_max_connections=100


                    [web:vars]

                    apache_max_clients=100

                    '
            -   class_notes: "There are a few examples here:\n  * The ansible ssh\
                    \ and connection options.\n  * A plain variable override for a\
                    \ specific host (mysql)\n  * A group variable override for the\
                    \ web group.\n"
        -   -   h2: Playbook
            -   p: 'Here is an example of defining variables in a playbook:'
            -   code: "- hosts: webservers\n  vars:\n    http_port: 80\n"
            -   class_notes: 'This shows a simple vars example as defined at the beginning
                    of a play.

                    '
        -   -   h2: Command Line
            -   p: 'You can also override variables from the command line:'
            -   code: 'ansible-playbook release.yml --extra-vars "version=1.23.45
                    other_var=foo"

                    '
            -   class_notes: 'Here is how you override variables on the command line.

                    Ask the class what they think the short flag is?

                    -e is the short flag.

                    '
        -   -   h2: Including Variable Files
            -   p: 'Here is an example of including a variable file based on a condition:'
            -   code: "- name: Includiung OS specific variables\n  include_vars: '{{\
                    \ ansible_os_family }}.yml'\n"
            -   class_notes: 'What value do the students thing the ansible_os_family
                    variable references?

                    This is typically Debian or RedHat for most systems.

                    '
        -   -   h2: Roles
            -   p: 'Ansible Roles also have variables that can be defined:'
            -   ul:
                - Rolename/vars contains variables that should stay internal to the
                    role.
                - Rolename/defaults contains variables that can be overridden.
            -   class_notes: 'The roles chapter will dig into this a lot more.

                    The main point is defaults are meant to be overridden.

                    '
        -   -   h2: Facts
            -   p: 'System facts are sourced from the following sources:'
            -   ul:
                - setup module
                - set_fact module
                - facts.d
            -   class_notes: 'The files placed in facts.d are processed by the setup
                    module.

                    aka, the Gathering Facts step.

                    '
        -   -   h2: Setup Module
            -   p: Run the setup module against your local machine to see what returns.
            -   code: 'ansible localhost -m setup --connection=local

                    '
            -   class_notes: 'Have students run this on their ansible server.

                    This requires an inventory file with ''localhost'' defined.

                    /etc/ansible/hosts

                    '
        -   -   h2: Discovered Facts
            -   p: 'Here is a sampling of facts discovered by the setup module:'
            -   code: "localhost | success >> {\n    \"ansible_facts\": {\n      \
                    \  \"ansible_all_ipv4_addresses\": [\n            \"192.168.1.37\"\
                    ,\n            \"172.17.42.1\"\n        ],\n        \"ansible_all_ipv6_addresses\"\
                    : [\n            \"fe80::c685:8ff:fe3b:a916\"\n        ],\n  \
                    \      \"ansible_architecture\": \"x86_64\",\n        \"ansible_bios_date\"\
                    : \"01/29/2013\",\n        \"ansible_bios_version\": \"UX32A.214\"\
                    ,\n        \"ansible_cmdline\": {\n            \"BOOT_IMAGE\"\
                    : \"/vmlinuz-3.13.0-27-generic.efi.signed\",\n            \"quiet\"\
                    : true,\n            \"ro\": true,\n            \"root\": \"/dev/mapper/kubuntu--vg-root\"\
                    ,\n            \"splash\": true,\n            \"vt.handoff\":\
                    \ \"7\"\n        },\n        \"ansible_date_time\": {\n      \
                    \      \"date\": \"2014-05-30\",\n            \"day\": \"30\"\
                    ,\n            \"epoch\": \"1401460386\",\n            \"hour\"\
                    : \"09\",\n            \"iso8601\": \"2014-05-30T14:33:06Z\",\n\
                    \            \"iso8601_micro\": \"2014-05-30T14:33:06.057018Z\"\
                    ,\n            \"minute\": \"33\",\n            \"month\": \"\
                    05\",\n            \"second\": \"06\",\n            \"time\":\
                    \ \"09:33:06\",\n            \"tz\": \"CDT\",\n            \"\
                    tz_offset\": \"-0500\",\n            \"weekday\": \"Friday\",\n\
                    \            \"year\": \"2014\"\n        },\n        \"ansible_default_ipv4\"\
                    : {\n            \"address\": \"192.168.1.37\",\n            \"\
                    alias\": \"wlan0\",\n            \"gateway\": \"192.168.1.1\"\
                    ,\n            \"interface\": \"wlan0\",\n            \"macaddress\"\
                    : \"c4:85:08:3b:a9:16\",\n            \"mtu\": 1500,\n       \
                    \     \"netmask\": \"255.255.255.0\",\n            \"network\"\
                    : \"192.168.1.0\",\n            \"type\": \"ether\"\n        },\n\
                    \        \"ansible_default_ipv6\": {},\n        \"ansible_devices\"\
                    : {\n            \"sda\": {\n                \"holders\": [],\n\
                    \                \"host\": \"SATA controller: Intel Corporation\
                    \ 7 Series Chipset Family 6-port SATA Controller [AHCI mode] (rev\
                    \ 04)\",\n                \"model\": \"Hitachi HTS54323\",\n \
                    \               \"partitions\": {\n                    \"sda1\"\
                    : {\n                        \"sectors\": \"625137282\",\n   \
                    \                     \"sectorsize\": 512,\n                 \
                    \       \"size\": \"298.09 GB\",\n                        \"start\"\
                    : \"63\"\n                    }\n                },\n        \
                    \        \"removable\": \"0\",\n                \"rotational\"\
                    : \"1\",\n                \"scheduler_mode\": \"deadline\",\n\
                    \                \"sectors\": \"625142448\",\n               \
                    \ \"sectorsize\": \"512\",\n                \"size\": \"298.09\
                    \ GB\",\n                \"support_discard\": \"0\",\n       \
                    \         \"vendor\": \"ATA\"\n            },\n            \"\
                    sdb\": {\n                \"holders\": [],\n                \"\
                    host\": \"SATA controller: Intel Corporation 7 Series Chipset\
                    \ Family 6-port SATA Controller [AHCI mode] (rev 04)\",\n    \
                    \            \"model\": \"SanDisk SSD i100\",\n              \
                    \  \"partitions\": {\n                    \"sdb1\": {\n      \
                    \                  \"sectors\": \"997376\",\n                \
                    \        \"sectorsize\": 512,\n                        \"size\"\
                    : \"487.00 MB\",\n                        \"start\": \"2048\"\n\
                    \                    },\n                    \"sdb2\": {\n   \
                    \                     \"sectors\": \"499712\",\n             \
                    \           \"sectorsize\": 512,\n                        \"size\"\
                    : \"244.00 MB\",\n                        \"start\": \"999424\"\
                    \n                    },\n                    \"sdb3\": {\n  \
                    \                      \"sectors\": \"45404160\",\n          \
                    \              \"sectorsize\": 512,\n                        \"\
                    size\": \"21.65 GB\",\n                        \"start\": \"1499136\"\
                    \n                    }\n                },\n                \"\
                    removable\": \"0\",\n                \"rotational\": \"0\",\n\
                    \                \"scheduler_mode\": \"deadline\",\n         \
                    \       \"sectors\": \"46905264\",\n                \"sectorsize\"\
                    : \"512\",\n                \"size\": \"22.37 GB\",\n        \
                    \        \"support_discard\": \"512\",\n                \"vendor\"\
                    : \"ATA\"\n            },\n            \"sdc\": {\n          \
                    \      \"holders\": [],\n                \"host\": \"USB controller:\
                    \ Intel Corporation 7 Series/C210 Series Chipset Family USB Enhanced\
                    \ Host Controller #2 (rev 04)\",\n                \"model\": \"\
                    xD/SD/M.S.\",\n                \"partitions\": {},\n         \
                    \       \"removable\": \"1\",\n                \"rotational\"\
                    : \"1\",\n                \"scheduler_mode\": \"deadline\",\n\
                    \                \"sectors\": \"0\",\n                \"sectorsize\"\
                    : \"512\",\n                \"size\": \"0.00 Bytes\",\n      \
                    \          \"support_discard\": \"0\",\n                \"vendor\"\
                    : \"Generic-\"\n            }\n        },\n        \"ansible_distribution\"\
                    : \"Ubuntu\",\n        \"ansible_distribution_major_version\"\
                    : \"14\",\n        \"ansible_distribution_release\": \"trusty\"\
                    ,\n        \"ansible_distribution_version\": \"14.04\",\n    \
                    \    \"ansible_docker0\": {\n            \"active\": false,\n\
                    \            \"device\": \"docker0\",\n            \"id\": \"\
                    8000.56847afe9799\",\n            \"interfaces\": [],\n      \
                    \      \"ipv4\": {\n                \"address\": \"172.17.42.1\"\
                    ,\n                \"netmask\": \"255.255.0.0\",\n           \
                    \     \"network\": \"172.17.0.0\"\n            },\n          \
                    \  \"macaddress\": \"56:84:7a:fe:97:99\",\n            \"mtu\"\
                    : 1500,\n            \"promisc\": false,\n            \"stp\"\
                    : false,\n            \"type\": \"bridge\"\n        },\n     \
                    \   \"ansible_domain\": \"onitato.com\",\n        \"ansible_env\"\
                    : {\n            \"COLORFGBG\": \"15;0\",\n            \"DBUS_SESSION_BUS_ADDRESS\"\
                    : \"unix:abstract=/tmp/dbus-0Rf33lsHZU\",\n            \"DEFAULTS_PATH\"\
                    : \"/usr/share/gconf/kde-plasma.default.path\",\n            \"\
                    DESKTOP_SESSION\": \"kde-plasma\",\n            \"DISPLAY\": \"\
                    :0\",\n            \"GDMSESSION\": \"kde-plasma\",\n         \
                    \   \"GDM_LANG\": \"en_US\",\n            \"GNOME_KEYRING_CONTROL\"\
                    : \"/run/user/1000/keyring-tJuVCy\",\n            \"GNOME_KEYRING_PID\"\
                    : \"2128\",\n            \"GPG_AGENT_INFO\": \"/tmp/gpg-c2qDOe/S.gpg-agent:2257:1\"\
                    ,\n            \"GS_LIB\": \"/home/linuturk/.fonts\",\n      \
                    \      \"GTK2_RC_FILES\": \"/etc/gtk-2.0/gtkrc:/home/linuturk/.gtkrc-2.0:/home/linuturk/.kde/share/config/gtkrc-2.0\"\
                    ,\n            \"GTK_RC_FILES\": \"/etc/gtk/gtkrc:/home/linuturk/.gtkrc:/home/linuturk/.kde/share/config/gtkrc\"\
                    ,\n            \"HOME\": \"/home/linuturk\",\n            \"IM_CONFIG_PHASE\"\
                    : \"1\",\n            \"INSTANCE\": \"\",\n            \"JOB\"\
                    : \"dbus\",\n            \"KDE_FULL_SESSION\": \"true\",\n   \
                    \         \"KDE_MULTIHEAD\": \"false\",\n            \"KDE_SESSION_UID\"\
                    : \"1000\",\n            \"KDE_SESSION_VERSION\": \"4\",\n   \
                    \         \"KONSOLE_DBUS_SERVICE\": \":1.410\",\n            \"\
                    KONSOLE_DBUS_SESSION\": \"/Sessions/2\",\n            \"KONSOLE_DBUS_WINDOW\"\
                    : \"/Windows/1\",\n            \"KONSOLE_PROFILE_NAME\": \"Shell\"\
                    ,\n            \"LANG\": \"en_US.UTF-8\",\n            \"LANGUAGE\"\
                    : \"en_US:en\",\n            \"LC_CTYPE\": \"en_US.UTF-8\",\n\
                    \            \"LESSCLOSE\": \"/usr/bin/lesspipe %s %s\",\n   \
                    \         \"LESSOPEN\": \"| /usr/bin/lesspipe %s\",\n        \
                    \    \"LOGNAME\": \"linuturk\",\n            \"LS_COLORS\": \"\
                    rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lz=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:\"\
                    ,\n            \"MANDATORY_PATH\": \"/usr/share/gconf/kde-plasma.mandatory.path\"\
                    ,\n            \"PAM_KWALLET_LOGIN\": \"/tmp//linuturk.socket\"\
                    ,\n            \"PATH\": \"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\"\
                    ,\n            \"PROFILEHOME\": \"\",\n            \"PWD\": \"\
                    /home/linuturk/github/ansible-sprint/advanced\",\n           \
                    \ \"QT_PLUGIN_PATH\": \"/home/linuturk/.kde/lib/kde4/plugins/:/usr/lib/kde4/plugins/\"\
                    ,\n            \"SELINUX_INIT\": \"YES\",\n            \"SESSION\"\
                    : \"kde-plasma\",\n            \"SESSIONTYPE\": \"\",\n      \
                    \      \"SESSION_MANAGER\": \"local/arrow:@/tmp/.ICE-unix/2442,unix/arrow:/tmp/.ICE-unix/2442\"\
                    ,\n            \"SHELL\": \"/bin/bash\",\n            \"SHELL_SESSION_ID\"\
                    : \"559b7b8e474c4000aa16e447d32e4b27\",\n            \"SHLVL\"\
                    : \"1\",\n            \"SSH_AGENT_LAUNCHER\": \"upstart\",\n \
                    \           \"SSH_AGENT_PID\": \"2259\",\n            \"SSH_AUTH_SOCK\"\
                    : \"/tmp/ssh-NgX9DMrVWBek/agent.2253\",\n            \"TERM\"\
                    : \"xterm\",\n            \"TEXTDOMAIN\": \"im-config\",\n   \
                    \         \"TEXTDOMAINDIR\": \"/usr/share/locale/\",\n       \
                    \     \"UPSTART_EVENTS\": \"started xsession\",\n            \"\
                    UPSTART_INSTANCE\": \"\",\n            \"UPSTART_JOB\": \"startkde\"\
                    ,\n            \"UPSTART_SESSION\": \"unix:abstract=/com/ubuntu/upstart-session/1000/2133\"\
                    ,\n            \"USER\": \"linuturk\",\n            \"WINDOWID\"\
                    : \"71303194\",\n            \"XAUTHORITY\": \"/tmp/kde-linuturk/xauth-1000-_0\"\
                    ,\n            \"XCURSOR_THEME\": \"oxy-white\",\n           \
                    \ \"XDG_CONFIG_DIRS\": \"/etc/xdg/xdg-kde-plasma:/usr/share/upstart/xdg:/etc/xdg\"\
                    ,\n            \"XDG_CURRENT_DESKTOP\": \"KDE\",\n           \
                    \ \"XDG_DATA_DIRS\": \"/usr/share:/usr/share/kde-plasma:/usr/local/share/:/usr/share/\"\
                    ,\n            \"XDG_GREETER_DATA_DIR\": \"/var/lib/lightdm-data/linuturk\"\
                    ,\n            \"XDG_RUNTIME_DIR\": \"/run/user/1000\",\n    \
                    \        \"XDG_SEAT\": \"seat0\",\n            \"XDG_SEAT_PATH\"\
                    : \"/org/freedesktop/DisplayManager/Seat0\",\n            \"XDG_SESSION_ID\"\
                    : \"c2\",\n            \"XDG_SESSION_PATH\": \"/org/freedesktop/DisplayManager/Session0\"\
                    ,\n            \"XDG_VTNR\": \"7\",\n            \"_\": \"/usr/local/bin/ansible\"\
                    \n        },\n        \"ansible_form_factor\": \"Notebook\",\n\
                    \        \"ansible_fqdn\": \"arrow.onitato.com\",\n        \"\
                    ansible_hostname\": \"arrow\",\n        \"ansible_interfaces\"\
                    : [\n            \"lo\",\n            \"docker0\",\n         \
                    \   \"wlan0\"\n        ],\n        \"ansible_kernel\": \"3.13.0-27-generic\"\
                    ,\n        \"ansible_lo\": {\n            \"active\": true,\n\
                    \            \"device\": \"lo\",\n            \"ipv4\": {\n  \
                    \              \"address\": \"127.0.0.1\",\n                \"\
                    netmask\": \"255.0.0.0\",\n                \"network\": \"127.0.0.0\"\
                    \n            },\n            \"ipv6\": [\n                {\n\
                    \                    \"address\": \"::1\",\n                 \
                    \   \"prefix\": \"128\",\n                    \"scope\": \"host\"\
                    \n                }\n            ],\n            \"mtu\": 65536,\n\
                    \            \"promisc\": false,\n            \"type\": \"loopback\"\
                    \n        },\n        \"ansible_lsb\": {\n            \"codename\"\
                    : \"trusty\",\n            \"description\": \"Ubuntu 14.04 LTS\"\
                    ,\n            \"id\": \"Ubuntu\",\n            \"major_release\"\
                    : \"14\",\n            \"release\": \"14.04\"\n        },\n  \
                    \      \"ansible_machine\": \"x86_64\",\n        \"ansible_memfree_mb\"\
                    : 677,\n        \"ansible_memtotal_mb\": 9884,\n        \"ansible_mounts\"\
                    : [\n            {\n                \"device\": \"/dev/mapper/kubuntu--vg-root\"\
                    ,\n                \"fstype\": \"ext4\",\n                \"mount\"\
                    : \"/\",\n                \"options\": \"rw,errors=remount-ro\"\
                    ,\n                \"size_available\": 9636679680,\n         \
                    \       \"size_total\": 22740668416\n            },\n        \
                    \    {\n                \"device\": \"/dev/sdb2\",\n         \
                    \       \"fstype\": \"ext2\",\n                \"mount\": \"/boot\"\
                    ,\n                \"options\": \"rw\",\n                \"size_available\"\
                    : 132574208,\n                \"size_total\": 247772160\n    \
                    \        },\n            {\n                \"device\": \"/dev/sdb1\"\
                    ,\n                \"fstype\": \"vfat\",\n                \"mount\"\
                    : \"/boot/efi\",\n                \"options\": \"rw\",\n     \
                    \           \"size_available\": 506130432,\n                \"\
                    size_total\": 509640704\n            },\n            {\n     \
                    \           \"device\": \"/dev/mapper/kubuntu--home--vg-home\"\
                    ,\n                \"fstype\": \"ext4\",\n                \"mount\"\
                    : \"/home\",\n                \"options\": \"rw\",\n         \
                    \       \"size_available\": 186540474368,\n                \"\
                    size_total\": 304337379328\n            }\n        ],\n      \
                    \  \"ansible_nodename\": \"arrow\",\n        \"ansible_os_family\"\
                    : \"Debian\",\n        \"ansible_pkg_mgr\": \"apt\",\n       \
                    \ \"ansible_processor\": [\n            \"Intel(R) Core(TM) i3-2367M\
                    \ CPU @ 1.40GHz\",\n            \"Intel(R) Core(TM) i3-2367M CPU\
                    \ @ 1.40GHz\",\n            \"Intel(R) Core(TM) i3-2367M CPU @\
                    \ 1.40GHz\",\n            \"Intel(R) Core(TM) i3-2367M CPU @ 1.40GHz\"\
                    \n        ],\n        \"ansible_processor_cores\": 2,\n      \
                    \  \"ansible_processor_count\": 1,\n        \"ansible_processor_threads_per_core\"\
                    : 2,\n        \"ansible_processor_vcpus\": 4,\n        \"ansible_product_name\"\
                    : \"UX32A\",\n        \"ansible_product_serial\": \"NA\",\n  \
                    \      \"ansible_product_uuid\": \"NA\",\n        \"ansible_product_version\"\
                    : \"1.0\",\n        \"ansible_python_version\": \"2.7.6\",\n \
                    \       \"ansible_selinux\": false,\n        \"ansible_swapfree_mb\"\
                    : 10211,\n        \"ansible_swaptotal_mb\": 10239,\n        \"\
                    ansible_system\": \"Linux\",\n        \"ansible_system_vendor\"\
                    : \"ASUSTeK COMPUTER INC.\",\n        \"ansible_user_id\": \"\
                    linuturk\",\n        \"ansible_userspace_architecture\": \"x86_64\"\
                    ,\n        \"ansible_userspace_bits\": \"64\",\n        \"ansible_virtualization_role\"\
                    : \"host\",\n        \"ansible_virtualization_type\": \"kvm\"\
                    ,\n        \"ansible_wlan0\": {\n            \"active\": true,\n\
                    \            \"device\": \"wlan0\",\n            \"ipv4\": {\n\
                    \                \"address\": \"192.168.1.37\",\n            \
                    \    \"netmask\": \"255.255.255.0\",\n                \"network\"\
                    : \"192.168.1.0\"\n            },\n            \"ipv6\": [\n \
                    \               {\n                    \"address\": \"fe80::c685:8ff:fe3b:a916\"\
                    ,\n                    \"prefix\": \"64\",\n                 \
                    \   \"scope\": \"link\"\n                }\n            ],\n \
                    \           \"macaddress\": \"c4:85:08:3b:a9:16\",\n         \
                    \   \"module\": \"iwlwifi\",\n            \"mtu\": 1500,\n   \
                    \         \"promisc\": false,\n            \"type\": \"ether\"\
                    \n        },\n        \"module_setup\": true\n    },\n    \"changed\"\
                    : false\n}\n"
            -   class_notes: 'Ask your students to find a useful variable and think
                    about how they

                    would use it?

                    There is a ton of useful variables when you run the setup module.

                    You can make intelligent decisions in your plays based on this

                    information.

                    '
        -   -   h2: Discovered Facts
            -   p: 'Here is how you reference these variables:'
            -   code: '{{ ansible_devices.sda.model }}

                    {{ ansible_hostname }}

                    '
            -   class_notes: 'Make note of how you reference embedded variables with
                    the dot notation.

                    '
        -   -   h2: Setting Facts in a Play
            -   p: 'You can set facts manually in a play using the set_facts module:'
            -   code: "# Example setting host facts using key=value pairs\n- set_fact:\
                    \ one_fact=\"something\" other_fact=\"{{ local_var * 2 }}\"\n\n\
                    # Example setting host facts using complex arguments\n- set_fact:\n\
                    \     one_fact: something\n     other_fact: \"{{ local_var * 2\
                    \ }}\"\n"
            -   class_notes: 'This shows the two main ways to define variables.

                    The key=value style, and the complex style.

                    '
        -   -   h2: Local Facts (Facts.d)
            -   p: 'You can place files ending in ''.fact'' in the /etc/ansible/facts.d
                    directory. These can be JSON, INI, or executable files. Here is
                    an example file:'
            -   code: '[general]

                    asdf=1

                    bar=2

                    '
            -   p: And here is how you reference the asdf variable.
            -   code: '{{ ansible_local.preferences.general.asdf }}

                    '
            -   class_notes: 'The code sample shows the file to be dropped,

                    and the way to reference that variable in templates and plays.

                    What type of facts would students put in facts.d?

                    Maybe something like master or cluster status?

                    '
        -   -   h2: Using Variables in Jinja2
            -   p: You've seen several examples of variables being referenced. The
                    same method is used to reference these variables in Jinja2 templates.
            -   code: '{{ variable_name }}

                    '
            -   class_notes: 'Most students should have figured this out by now. We
                    are about to

                    introduce the filters in Jinja though, so it is worth revisiting
                    this.

                    '
        -   -   h2: Jinja2 Filters
            -   p: 'There are many useful filters you can use in your Jinja2 templates.
                    Here are a few useful ones:'
            -   code: '# Combine two lists

                    {{ list1 | union(list2) }}


                    # Get a random number

                    {{ 59 | random }} * * * * root /script/from/cron


                    # md5sum of a filename

                    {{ filename | md5 }}


                    # Comparisons

                    {{ ansible_distribution_version | version_compare(''12.04'', ''>='')
                    }}

                    '
            -   class_notes: 'Ask students to find a filter that makes a variable
                    all lowercase.

                    ie, Ubuntu => ubuntu

                    {{ variable | lower }} is the answer.

                    There are a lot more filters out there.

                    Reference the Ansible and Jinja2 documentation for a complete
                    list.

                    '
        -   -   h2: Defaulting Values
            -   p: 'You can provide a default value for a variable using the following
                    filter:'
            -   code: '{{ some_variable | default("foobar") }}

                    '
            -   class_notes: 'Defaulting values is a great way to deal with undefined
                    variables.

                    It allows you have to have some sane defaults in your templates,

                    but allow them to be easily overridden.

                    '
        -   -   h2: Magic Variables
            -   p: Ansible provides information about other hosts though a series
                    of 'magic variables'.
            -   ul:
                - hostvars
                - group_names
                - groups
            -   class_notes: 'Ansible provides these for you automatically.

                    These three are the most important.

                    Don''t use these names as they are reserved.

                    ''environment'' is also reserved.

                    '
        -   -   h2: hostvars
            -   p: Hostvars let you ask about the variables of another host, including
                    facts that have been gathered about that host.
            -   code: '{{ hostvars[''test.example.com''][''ansible_distribution'']
                    }}

                    '
            -   class_notes: 'Where would this be useful?

                    Grabbing an IP address of another host would be an example.

                    This specific example will give you the value of

                    ansible_distribution from the host test.example.com.

                    This doesn''t have to run on test.example.com to retrieve this
                    value.

                    '
        -   -   h2: group_names
            -   p: The group_names variable contains a list of all the groups the
                    current host is in.
            -   code: "{% if 'webserver' in group_names %}\n   # some part of a configuration\
                    \ file that only applies to webservers\n{% endif %}\n"
            -   class_notes: 'Why would you use this method?

                    Apply actions to a host based on it''s group. ie, MySQL slave
                    readonly=1

                    This example checks the current host is in the webserver group.

                    If it is, the information between the blocks will be rendered.

                    '
        -   -   h2: groups
            -   p: groups is a list of all the groups (and hosts) in the inventory.
            -   code: "{% for host in groups['app_servers'] %}\n   # something that\
                    \ applies to all app servers.\n{% endfor %}\n"
            -   class_notes: 'This would allow you to work with all the app servers.

                    Where would your students use this?

                    A good example would be listing all your app servers in

                    your haproxy configuration.

                    '
        -   -   h2: 'Lab: Overriding Variables'
            -   p: Given this play, override the local_var variable using the command
                    line flag.
            -   code: "- hosts: localhost\n  connection: local\n  vars:\n    - local_var:\
                    \ \"override me\"\n  tasks:\n    - name: print out the variable\n\
                    \      debug: msg=\"This should not output 'override me' - {{\
                    \ local_var }}\"\n"
            -   h6: 'Objective: Override the variable without modifying the playbook'
            -   class_notes: 'Students should override the variable without changing
                    the play file itself.

                    '
        -   -   h2: Lab Solution
            -   code: 'ansible-playbook variable_override.yml --extra-vars "local_var=foobar"

                    '
            -   class_notes: 'Students could have also used -e instead of the full
                    option.

                    '
        -   -   h2: Lab Output
            -   code: "\nPLAY [localhost] **************************************************************\n\
                    \nGATHERING FACTS ***************************************************************\n\
                    ok: [localhost]\n\nTASK: [print out the variable] ************************************************\n\
                    ok: [localhost] => {\n    \"msg\": \"This should not output 'override\
                    \ me' - foobar\"\n}\n\nPLAY RECAP ********************************************************************\n\
                    localhost                  : ok=2    changed=0    unreachable=0\
                    \    failed=0\n"
            -   class_notes: 'The important bit here is the replaced value at the
                    end of the msg line.

                    '
-   -   nested:
        -   -   h1: Dynamic Inventories
        -   -   h3: What is Dynamic Inventory?
            -   ul:
                - Executable script
                - Queries a service that holds data about servers
                - Returns the data to Ansible (as JSON)
            -   class_notes: "Dynamic inventory is a script that queries a service,\
                    \ like a cloud\nprovider API or a management application like\
                    \ Spacewalk.  This data\nis formatted in an Ansible-specific JSON\
                    \ data structure and is used in \nlieu of hardcoded, static inventory\
                    \ files.\n"
        -   -   h3: Why Dynamic Inventory?
            -   ul:
                - Time
                - Accuracy
            -   class_notes: "Ideally, the source of data for our dynamic inventory\
                    \ scripts is 100%\ncorrect, and is automatically updated as infrastructure\
                    \ changes.  This \nis especially useful in environments where\
                    \ machines are coming on and offline\nall the time, like a cloud\
                    \ or virtual environment.\n"
        -   -   h3: Manual Invocation
            -   code: '$ ./docker.py (--list | --host)

                    '
            -   class_notes: 'Manual invocation of a dynamic inventory script is straight
                    forward.

                    Dynamic inventory scripts must be executable, so calling them
                    explictly will

                    invoke the script and return JSON as output.

                    All inventory scripts must accept two optional arguments, list
                    and host.  ''List''

                    lists hosts, and ''host'' accepts a hostname as an argument and
                    returns data on the host.

                    Note, ''--host'' is functionally optional because of the ''_meta''
                    hash returned in the

                    ''--list'' results.  More on that later.

                    '
        -   -   h3: Results
            -   image: https://raw.githubusercontent.com/Linuturk/ansible-sprint/master/advanced/resources/chapter06/shot1.png
            -   class_notes: "The output of this command is returned as JSON, in an\
                    \ Ansible-specific structure.\nThis image shows the invocation\
                    \ of the Docker inventory script. The script queries\na Docker\
                    \ host and requests information about containers. The script creates\
                    \ groups,\nwhich we see as arrays of hostnames.  \nThe '_meta'\
                    \ hash has data about hosts -- essentially this data becomes hostvars\
                    \ for \neac host.SSH host, port information plus additional host\
                    \ variables are returned by \nthe script which can later be used\
                    \ in plays.\n"
        -   -   h3: Ansible with Dynamic Inventory
            -   code: "$ ansible -i ./docker.py --list-hosts running\n  suspicious_ptolemy\n\
                    \  ecstatic_albattani\n"
            -   class_notes: 'This is an example of an ad-hoc command using the inventory
                    script.

                    We use the -i argument just as we would with any other inventory
                    script, however

                    we use a path to a dynamic inventory script with this argument
                    rather

                    than a path to a static inventory file.

                    You can see from this command we have asked to list hosts that
                    the limit matches. In

                    this example, we are matching the group "running".

                    '
        -   -   h3: Combining Inventory Types
            -   code: '$ tree

                    .

                    ├── common.yml

                    ├── prod

                    │   ├── docker.py

                    │   └── servers

                    └── site.yml


                    1 directory, 4 files


                    $ ansible-playbook -i prod site.yml

                    '
            -   class_notes: 'One can combine inventory types, both static and dynamic
                    inventories, by

                    placing them in a directory and referencing the directory as the
                    value of the

                    optional ''-i'' argument.

                    In the example in this slide, you can see a static inventory file
                    called ''servers'',

                    a dynamic inventory script called ''docker.py'', in a directory
                    called ''prod''. Notice

                    that the value passed to the ''-i'' argument is the name of the
                    directory, ''prod''.

                    '
        -   -   h3: Lab
            -   p: "Using the dynamic inventory script for today's infrastructure,\
                    \ provision several\ninstances.  Manually run the inventory script\
                    \ to query information on \nthe instances.  Then, run the inventory\
                    \ script using an Ansible command to\nlist and then ping the instances.\n"
-   set_global:
        background: '#007777'
        transition: rotate
-   -   nested:
        -   -   h1: Ansible Vault
            -   p: What are you trying to hide?
        -   -   h1: Ansible Vault
            -   p: Ansible Vault is a tool to encrypt YAML variables files that may
                    contain sensitive data.
            -   ul:
                - Password-based
                - Separate command line tool
                - Encrypts YAML files
            -   class_notes: Ansible Vault is a command line tool that can be used
                    to encrypt files that may contain sensitive data. it's usually
                    used to encrypt variables files, but it can encrypt entire playbooks
                    as well. When Ansible is operating on a playbook that refers to
                    an encrypted file, it can either prompt for the password or be
                    fed a password via file. 'Question ideas; what kinds of information
                    should be encrypted?'
        -   -   h2: Vault Operations
            -   ul:
                - create
                - edit
                - rekey
                - encrypt
                - decrypt
            -   class_notes: ansible-vault is the CLI tool, and it has several operations.
        -   -   h2: Vault Operations
            -   code: ansible-vault create secrets.yml
            -   class_notes: Create a new file and open it in $EDITOR. When it's saved,
                    it will be encrypted.
        -   -   h2: Vault Operations
            -   code: ansible-vault edit secrets.yml
            -   class_notes: Edit an existing file in $EDITOR. Ansible will decrypt
                    it to a temporary location and open it in an editor, and then
                    when saved, re-encrypt it.
        -   -   h2: Vault Operations
            -   code: ansible-vault rekey secrets.yml
            -   class_notes: Change the password on an encrypted file.
        -   -   h2: Vault Operations
            -   code: ansible-vault encrypt secrets.yml
            -   class_notes: Encrypt an existing file.
        -   -   h2: Vault Operations
            -   code: ansible-vault decrypt secrets.yml
            -   class_notes: Permanently decrypt an encrypted file.
        -   -   h2: Running a Playbook
            -   code: ansible-playbook --ask-vault-pass vault-test.yml
            -   code: ansible-playbook --vault-password-file ../vault-pw vault-test.yml
            -   class_notes: There are two ways to run a playbook that refers to encrypted
                    content. The first one prompts at runtime. The second method is
                    to refer to a file on disk that contains the password.
        -   -   h2: 'Lab: Vault'
            -   ul:
                - Create a new encrypted file
                - Edit that file
                - Re-key the file
                - Use an encrypted file in a playbook
            -   h6: 'Objective: Create a vault-encrypted vars file for a subsequent
                    lab.'
-   -   nested:
        -   -   h1: Roles
            -   p: Reusing and sharing Ansible content.
            -   class_notes: Title slide. Roles are a way to organize and reuse Ansible
                    content in a standard way.
        -   -   h2: Filesystem Structure
            -   p: Roles use specific file structures.
            -   class_notes: Roles search for variables, files and templates in specific
                    places. We'll discuss the file structure over the next few slides.
        -   -   h3: 'Example Role Structure in a Project Folder:'
            -   code: "site.yml\nroles/\n   role1/\n     files/\n     templates/\n\
                    \     tasks/\n     handlers/\n     vars/\n     meta/\n"
        -   -   h3: 'Calling a role in a playbook example:'
            -   code: "---\n- hosts: webservers\n  roles:\n     - common\n     - webservers\n"
        -   -   h3: 'Behavior examples of role X:'
            -   ul:
                - If roles/x/tasks/main.yml exists, tasks listed therein will be added
                    to the play
                - If roles/x/handlers/main.yml exists, handlers listed therein will
                    be added to the play
                - If roles/x/vars/main.yml exists, variables listed therein will be
                    added to the play
                - If roles/x/meta/main.yml exists, any role dependencies listed therein
                    will be added to the list of roles
                - Any copy tasks can reference files in roles/x/files/
                - Any script tasks can reference scripts in roles/x/files/
                - Any template tasks can reference files in roles/x/templates/
                - Any include tasks can reference files in roles/x/tasks/
        -   -   h3: 'Parameterize Your Roles:'
            -   code: "---\n- hosts: webservers\n  roles:\n    - common\n    - { role:\
                    \ foo, dir: '/opt/a',  port: 5000 }\n    - { role: foo, dir: '/opt/b',\
                    \  port: 5001 }\n"
        -   -   h3: 'Call Roles Conditionally:'
            -   code: "---\n- hosts: webservers\n  roles:\n    - { role: foo, when:\
                    \ \"ansible_os_family == 'RedHat'\" }\n"
        -   -   h3: 'Pre and Post Tasks, Use of roles in a top level playbook:'
            -   code: "---\n- hosts: webservers\n\n  pre_tasks:\n    - shell: echo\
                    \ 'Hello.'\n\n  roles:\n    - { role: some_role }\n\n  tasks:\n\
                    \    - shell: echo 'I called a role!'\n\n  post_tasks:\n    -\
                    \ shell: echo 'Goodbye.'\n"
        -   -   h2: Variables Defaults
            -   p: It is possible to set default variables for your roles.
            -   class_notes: Role default variables allow you to set default variables
                    for included or dependent roles. To create defaults, simply add
                    a defaults/main.yml file in your role directory. These variables
                    will have the lowest priority of any variables available, and
                    can be easily overridden by any other variable, including inventory
                    variables.
        -   -   h2: Role Dependencies
            -   p: Role Dependencies allow for roles to automatically pull in other
                    roles.
            -   class_notes: Role dependencies allow you to automatically pull in
                    other roles when using a role. Role dependencies are stored in
                    the meta/main.yml file contained within the role directory. This
                    file should contain a list of roles and parameters to insert before
                    the specified role.
        -   -   h3: Example role dependency entry in the meta/main.yml file
            -   code: "---\ndependencies:\n  - { role: common, some_parameter: 3 }\n\
                    \  - { role: apache, port: 80 }\n  - { role: postgres, dbname:\
                    \ blarg, other_parameter: 12 }\n"
        -   -   h3: Duplicate Role Dependiencies
            -   p: You can call a role dependency multiple times with various parameters.
            -   code: "---\nallow_duplicates: yes\ndependencies:\n  - { role: apache,\
                    \ port: 80 }\n  - { role: apache, port: 8080 }\n"
            -   class_notes: Not a common use case, but you can parameterize role
                    dependencies in a repeated way.  Such as having multiple runs
                    of apache based on the dependencies of another role.  This could
                    get you multiple versions of a stack of apache, tomcat and a database
                    with different parameters.  The order of execution would be the
                    order of the duplicates and repeat the roles that depend on it.  For
                    example, this could be tomcat, apache with port 80, then tomcat,
                    apache with port 8080, and so on.  They will rerun against the
                    same inventory, of course.
        -   -   h2: Embedding Custom Modules
            -   p: Role-specific custom modules can be packaged with the role.
            -   class_notes: This is an advanced topic that should not be relevant
                    for most users. If you write a custom module you may wish to distribute
                    it as part of a role. Generally speaking, Ansible as a project
                    is very interested in taking high-quality modules into ansible
                    core for inclusion, so this shouldn’t be the norm, but it’s quite
                    easy to do.
        -   -   h3: 'Examples of embedding a custom module in a role:'
            -   code: "roles/\nmy_role/\n  library/\n    module1\n    module2\n"
            -   class_notes: Alongside the ‘tasks’ and ‘handlers’ structure of a role,
                    add a directory named ‘library’. In this ‘library’ directory,
                    then include the module directly inside of it.
        -   -   h3: 'Calling the role with a custom module in a playbook:'
            -   code: "- hosts: webservers\n  roles:\n    - my_role\n"
            -   class_notes: As you can see, we call a role with a custom module just
                    as we would a role without one. This is because our custom module
                    also follows the file structure as previously described.
        -   -   h2: Ansible Galaxy
            -   p: Sharing is caring. visit http://galaxy.ansible.com
            -   class_notes: Ansible Galaxy is a free site for finding, downloading,
                    rating, and reviewing all kinds of community developed Ansible
                    roles and can be a great way to get a jumpstart on your automation
                    projects. You can sign up with social auth, and the download client
                    ‘ansible-galaxy’ is included in Ansible 1.4.2 and later.
        -   -   h3: 'One last trick: Galaxy has you covered.'
            -   code: 'ansible-galaxy init mynewrole

                    '
            -   class_notes: the ansible-galaxy command doesn't just download an install
                    roles from the public service, it will also initialize an empty
                    role with the role name of your choosing. This means it will place
                    all the folders, skeleton files and file structure as needed.
                    Use this to write roles without having to remember to create every
                    file or folder.
-   -   nested:
        -   -   h1: Delegation
            -   p: I like things done my way but by somebody else.
            -   class_notes: 'In this chapter we discuss delegation, how tasks in
                    a play

                    can be redirected to an alternate host for execution.

                    What use cases can you think of for looping over hosts to

                    execute a task, but have that task execute somewhere else?

                    '
        -   -   h2: Delegation
            -   ul:
                - Local actions and actions on other hosts
                - Delegation to a host in inventory
                - Delegation to a host not in inventory
                - Task execution concurrency with delegation
            -   class_notes: 'Actions can be done locally, or on another system in
                    your

                    inventory, or out of your inventory. Execution concurrency

                    is a concern as well.

                    '
        -   -   h2: Local actions and actions on other hosts
            -   p: 'Task control keyword: delegate_to'
            -   code: "- name: take out of load balancer pool\n  command: /usr/bin/take_out_of_pool\
                    \ {{ inventory_hostname }}\n  delegate_to: localhost\n\n- name:\
                    \ update packages\n  yum: name=acme-web-stack state=latest\n\n\
                    - name: add back to load balancer pool\n  command: /usr/bin/add_back_to_pool\
                    \ {{ inventory_hostname }}\n  delegate_to: localhost\n"
            -   class_notes: 'The delegate_to keyword is what tells Ansible to redirect
                    the

                    task to the system listed. The variables you reference are

                    attached to the host in the loop, not the host you are

                    delegating to. So the task has the context of the host in the

                    loop but it just gets executed on the host you delegate to.


                    Is there another way to indicate that an action needs to

                    happen locally?

                    '
        -   -   h2: Delegation to a host in inventory
            -   p: Delegation most often targets another host in your inventory
            -   p: Uses connection variable data from delegate target
            -   ul:
                - ansible_connection
                - ansible_ssh_host
                - ansible_ssh_port
                - ansible_ssh_user
                - etc...
            -   class_notes: 'When delegating to a host listed in your inventory,
                    data

                    from your delegation target will be used when creating the

                    connection to the delegation target, but only the connection

                    related variables. The rest will be read from the host in the

                    loop.

                    '
        -   -   h2: Delegation to a host not in inventory
            -   p: 'Delegation: not just limited to hosts in your inventory'
            -   p: Make use of add_host to adjust connection details
            -   code: "- name: add delegation host\n  add_host: name=hubert ansible_ssh_host=192.168.10.2\n\
                    \            ansible_ssh_user=fred\n"
            -   class_notes: 'You can also delegate to a host that doesn''t exist
                    in your

                    inventory. In this case, ansible will use the string provided

                    verbatim and attempt to connect to it with the current connection

                    type and details. If you need to adjust the connection details,

                    make use of the add_host task to create an ephemeral host in your

                    inventory with connection data defined.

                    '
        -   -   h2: 'Lab: ephemeral host task delegation'
            -   p: Create an ephemeral host and delegate a task to it
            -   ul:
                - Create a play for localhost
                - Create a host using add_host with detailed connection variables
                - Create a simple task that is delegated to the added host
                - Run playbook with -vvvv to observe the connection details
            -   class_notes: 'This is a simple contrived lab that will exercise making
                    use of

                    add_host to create an ephemeral host to delegate a task to. This

                    host doesn''t have to actually exist, a connection failure on
                    the

                    task will suffice to see the connection details to observe the

                    delegation. Feel free to play with values and observe how they

                    reflect in running the lab.

                    '
            -   h6: 'Objective: Using an ephemeral host to delegate a single task
                    to'
        -   -   h2: Sample Play
            -   code: "---\n- name: test play\n  hosts: localhost\n\n  tasks:\n  \
                    \  - name: add delegation host\n      add_host: name=hubert ansible_ssh_host=192.168.10.2\n\
                    \                ansible_ssh_user=fred\n\n    - name: silly echo\n\
                    \      command: echo {{ inventory_hostname }}\n      delegate_to:\
                    \ hubert\n"
            -   code: '$ ansible-playbook test-play.yml -vvvv

                    '
        -   -   h2: Task execution concurrency with delegation
            -   p: Delegated tasks will run for every host in the loop
            -   p: Tasks will run with configured forks / serial
            -   p: Be aware of race conditions and concurrency issues
            -   class_notes: 'Delegated tasks will run for every host in the hosts:
                    , but this

                    can create issues with race conditions, particularly when using

                    conditionals in the task, as the forks count will be used to create

                    multiple concurrent tasks. This can also create a thundering

                    herd problem of too many connections opening at once to a single

                    host. SSH servers have a MaxStartups config option that can limit

                    how many concurrent connections it''ll allow. Easy to overflow.


                    What happens when you have five hosts in your set, five or more

                    forks, a task that is conditional on the existence of a file,
                    and

                    the task creates the file. All five tasks will run at once, racing

                    to create the file.

                    '
        -   -   h2: 'Lab: multi-host task delegation'
            -   ul:
                - Create a play to loop over 'webservers' group
                - Create a task to use mysql_user module to add a user
                - Use host specific mysql user / password data
                - delegate_to should be used to execute on the first 'databases' server
            -   h6: 'Objective: Add mysql users to a database for a set of hosts'
        -   -   h2: Sample Play
            -   code: "---\n- name: MySQL Users\n  hosts: webservers\n\n  tasks:\n\
                    \    - name: add a mysql user for the server\n      mysql_user:\
                    \ name={{ db_username }} host={{ inventory_hostname }}\n     \
                    \             password='{{ db_password }}' priv='ansible.*:ALL'\n\
                    \                  state=present\n      delegate_to: databases[0]\n"
            -   p: 'When ran with -vvvv one can clearly see the connection debugging

                    output which will show the delegation in action.

                    '
-   -   nested:
        -   -   h1: Jinja2 Templates Labs
        -   -   h2: Lab
            -   p: Create playbook and a jinja2 template to achieve the following
                    results
            -   ul:
                - Template out /etc/sysconfig/iptables
                - Only allow access to MySQL (tcp/3306) from servers in the webservers
                    group
                - A play to create this file from the template
                - The play should have a handler to reload iptables when the file
                    changes
                - iptables should be enabled and configured to start on boot
        -   -   h2: Sample template
            -   code: '*filter

                    :INPUT ACCEPT [0:0]

                    :FORWARD ACCEPT [0:0]

                    :OUTPUT ACCEPT [0:0]


                    {% for server in groups[''webservers''] %}

                    -A INPUT -p tcp -s {{ hostvars[server].ansible_eth1.ipv4.address
                    }} -i eth1 -d {{ ansible_eth1.ipv4.address }} --dport 3306 -j
                    ACCEPT

                    {% endfor %}


                    {% for server in groups[''databases''] %}

                    {% if server != inventory_hostname %}

                    -A INPUT -p tcp -s {{ hostvars[server].ansible_eth1.ipv4.address
                    }} -i eth1 -d {{ ansible_eth1.ipv4.address }} --dport 3306 -j
                    ACCEPT

                    {% endif %}

                    {% endfor %}


                    -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

                    -A INPUT -p icmp -j ACCEPT

                    -A INPUT -i lo -j ACCEPT

                    -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT

                    -A INPUT -j REJECT --reject-with icmp-host-prohibited

                    -A FORWARD -j REJECT --reject-with icmp-host-prohibited

                    COMMIT

                    '
        -   -   h2: Sample play
            -   code: "---\n- hosts: webservers\n  gather_facts: true\n\n- hosts:\
                    \ databases\n  handlers:\n    - name: Reload iptables\n      service:\
                    \ name=iptables state=reloaded\n\n  tasks:\n    - name: Template\
                    \ /etc/sysconfig/iptables\n      template: src=templates/iptables.j2\
                    \ dest=/etc/sysconfig/iptables\n      notify: Reload iptables\n\
                    \n    - name: Ensure iptables is started and enabled\n      service:\
                    \ name=iptables state=started enabled=yes\n"
-   -   nested:
        -   -   h1: Assessment Questions
            -   link:
                - http://bit.ly/ansible_advanced
                - http://bit.ly/ansible_advanced

