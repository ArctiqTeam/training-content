---
header:
  author: Matt Martz
  title: Variables
  description: Understand the basics of variables, where they come from, how they get set, and how to evaluate and manipulate them

slides:

  -
    - nested:

      -
        - h1: Variables
        - p: Understand the basics of variables, where they come from, how they get set, and how to evaluate and manipulate them

      -
        - h1: Host Variables
        - p: Host variables are "facts" about a server

      -
        - h1: Host Variables (Continued)
        - p: Where do they come from?
        - ul:
          - inventory
          - fact gathering (setup)
          - host_vars directory

      -
        - h1: Group Variables
        - p: '"facts" that apply to a grouping of servers'

      -
        - h1: Group Variables (Continued)
        - p: Where do they come from?
        - ul:
          - inventory
          - group_vars directory
        - p: ""
        - p: The name of the files in the group_vars directory line up with the group name being targeted. "all" is a special keyword to apply facts to all hosts.

      -
        - h1: Variable Precedence
        - p: Precedence should simply feel natural
        - p: The most specific applied variable wins

      -
        - h1: YAML
        - p: Plays, roles and tasks are formatted in YAML

      -
        - h1: YAML (Continued)
        - p: A play is a "list" of "dictionaries" that looks simialr to
        - code: |
            ---
            - name: Web Servers
              hosts: web
              tasks:
                - name: Install apache
                  apt: name=apache2 state=present

            - name: Database Servers
              hosts: database
              tasks:
                - name: Install mysql
                  apt: name=mysql-server state=present

      -
        - h1: YAML (Continued)
        - p: This play YAML becomes
        - code: |
            [
              {
                "name": "Web Servers",
                "hosts": "web",
                "tasks": [
                  {
                     "name": "Install apache",
                     "apt": "name=apache2 state=present"
                  }
                ]
              },
              {
                "name": "Database Servers",
                ...
              }
            ]

      -
        - h1: YAML (Continued)
        - p: Boolean Values
        - ul:
          - "y"
          - "yes"
          - "n"
          - "no"
          - "true"
          - "false"
          - "on"
          - "off"
        - p: The above are case insensitive
        - class_notes: |
            These are a list of all the values that YAML treats as boolean (true/false).
            If you need to use one of the above as a literal string, make sure you quote it.

      -
        - h1: YAML (Continued)
        - h4: key=value
        - code: |
            apt: name=apache2 state=present
        - h4: Pure YAML
        - code: |
            apt:
              name: apache2
              state: present

      -
        - h1: YAML (Continued)
        - p: The biggest biggest difference to note with key=value is that all values are treated as strings
        - class_notes: The reason for treating everything as a string, is due to the use of the shlex module in python. It has no way of knowing what you actually mean, so it takes the safe route and makes everything a string. Filters may be needed to evaluate values as you expect, such as the 'int' and 'bool' filters.

      -
        - h1: Using Variables in YAML
        - p: Ansible uses "mustache" like variable expansion
        - h4: group_vars/all
        - code: |
            ---
            apache2_version: 2.2.22-1ubuntu1
        - h4: Task
        - code: '- apt: name="apache2={{ apache2_version }}" state=present'

      -
        - h1: register
        - p: A special keyword "register" exists for all tasks, that will assign the output from a module to the variable of the specified name, for later manipulation or evaluation in use with other tasks
        - code: |
            - git: repo=git://github.com/ansible/ansible.git dest=/tmp/ansible
              register: ansible_git
        - class_notes: |
            Different modules produce different data structures. For example, command and shell return a data structure containing the return code of the command, the contents of stderr and stdout, etc. The next section talks about how to explore the contents of a register variable.

      -
        - h1: Inspecting Variables
        - p: Different modules produce different data structures. The 'debug' module will help you inspect that data structure.
        - code: |
            - debug: var=ansible_git
        - h4: Output Sample
        - code: |
            ok: [someserver] => {
                "ansible_git": {
                    "after": "1b4ba5431b1070c63b9069d310f42e16f302db10",
                    "before": "69b2d82be6ffe20f04070cddf11b7629aa8420e5",
                    "changed": true,
                    "invocation": {
                        "module_args": "repo=git://github.com/ansible/ansible.git dest=/tmp/ansible",
                        "module_name": "git"
                    }
                }
            }

      -
        - h1: Module Output Structure
        - p: All modules should return a key titled "changed" with a boolean value of "true" or "false" defining whether the module made a change
        - p: Additionally, under a failure scenario, a module would set a key of "failed" with a boolean value of "true"
