---
header:
  author: Matt Martz
  title: Variables
  description: Understand the basics of variables, where they come from, how they get set, and how to evaluate and manipulate them

slides:

  -
    - nested:

      -
        - h1: Variables
        - p: Understand the basics of variables, where they come from, how they get set, and how to evaluate and manipulate them

      -
        - h1: Host Variables
        - p: Host variables are "facts" about a server that contains info such as
        - ul:
          - Hostname
          - IP addresses
          - Date and Time information
          - CPU, Disk, Memory
          - Hardware Architecture
          - Operating System Information
        - class_notes: For an example the students can run 'ansible all -i localhost, -c local -m setup'

      -
        - h1: Host Variables (Continued)
        - p: Where do they come from?
        - ul:
          - inventory
          - fact gathering (setup)
          - host_vars directory

      -
        - h1: Group Variables
        - p: '"facts" that apply to a grouping of servers'

      -
        - h1: Group Variables (Continued)
        - p: Where do they come from?
        - ul:
          - inventory
          - group_vars directory
        - p: ""
        - p: The name of the files in the group_vars directory line up with the group name being targeted. "all" is a special keyword to apply facts to all hosts.

      -
        - h1: Variable Precedence
        - p: Precedence should simply feel natural
        - p: The most specific applied variable wins

      -
        - h1: Using Variables in YAML
        - p: Ansible uses "mustache" like variable expansion
        - h4: group_vars/all
        - code: |
            ---
            apache2_version: 2.2.22-1ubuntu1
        - h4: Task
        - code: '- apt: name="apache2={{ apache2_version }}" state=present'

      -
        - h1: register
        - p: A special keyword "register" exists for all tasks, that will assign the output from a module to the variable of the specified name, for later manipulation or evaluation in use with other tasks
        - code: |
            - git: repo=git://github.com/ansible/ansible.git dest=/tmp/ansible
              register: ansible_git
        - class_notes: |
            Different modules produce different data structures. For example, command and shell return a data structure containing the return code of the command, the contents of stderr and stdout, etc. The next section talks about how to explore the contents of a register variable.

      -
        - h1: Inspecting Variables
        - p: Different modules produce different data structures. The 'debug' module will help you inspect that data structure.
        - code: |
            - debug: var=ansible_git
        - h4: Output Sample
        - code: |
            ok: [someserver] => {
                "ansible_git": {
                    "after": "1b4ba5431b1070c63b9069d310f42e16f302db10",
                    "before": "69b2d82be6ffe20f04070cddf11b7629aa8420e5",
                    "changed": true,
                    "invocation": {
                        "module_args": "repo=git://github.com/ansible/ansible.git dest=/tmp/ansible",
                        "module_name": "git"
                    }
                }
            }

      -
        - h1: Module Output Structure
        - p: All modules should return a key titled "changed" with a boolean value of "true" or "false" defining whether the module made a change
        - p: Additionally, under a failure scenario, a module would set a key of "failed" with a boolean value of "true"

      -
        - h1: Dynamically Adding Host Facts
        - p: During runtime you can run add additional host vars using the "set_fact" module
        - code: |
            - local_action:
                module: wait_for
                host: "{{ ansible_default_ipv4.address }}"
                port: 22
                delay: 1
                timeout: 1
              register: port_test
              failed_when: False

            - set_fact: ansible_ssh_port=2222
              when: port_test|failed
        - class_notes: This example uses the wait_for module to attempt communication with port 22 on the remote host via a local action. Don't fail if wait_for fails, and if wait_for fails, set ansible_ssh_port to port 2222 for future communciation with the server.

      -
        - h1: Magic Variables
        - p: There are several standard variables that are created and exposed by ansible
        - ul:
          - inventory_dir
          - inventory_hostname
          - inventory_hostname_short
          - inventory_file
          - playbook_dir
          - play_hosts
          - hostvars
          - groups
          - group_names
          - ansible_ssh_user
        - class_notes: |
            play_hosts is new to 1.5, there is also 'vars' and 'environment' but are not widely used or discussed
            http://docs.ansible.com/playbooks_variables.html#magic-variables-and-how-to-access-information-about-other-hosts
