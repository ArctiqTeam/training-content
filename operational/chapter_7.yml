---
header:
  author: Tim G
  title: Task Control 
  description: Ansible has a lot of ways to control the operation of specific tasks. You can use then "when" keyword to skip tasks according to certain conditions, loop over items in lists or hashes, and control the "failed" or "changed" responses of particular tasks. Local actions and delegation can be used to control where a task runs.

slides:

  -
    - nested:
      - 
        - h1: Task Control
        - ul:
          - "Conditionals: when"
          - "Loops: with_items, etc"
          - "Task status: failed_when, changed_when"
          - Local actions and delegation

      - 
        - h1: Conditionals
        - h3: Useful for
        - ul:
          - Acting on results of previous tasks
          - Handling cross-distro/env differences

      - 
        - h1: "An Example"
        - code: |
            - name: do something only on RedHat-style systems
              command: mycommand
              when: ansible_os_family == "RedHat"

        - class_notes: The when keyword, when applied to a task, can control execution of that task and skip it when certain conditions are set. Any variable can be used in a "when" condition, including register variables, facts, and group/host vars. Some particularly useful uses of this include skipping tasks based on the results of previous tasks, and handling cross-distro differences in package names/managers.

      - 
        - h1: "Loops"
        - h3: "with_items: Loops over a list, one task per item"

        - class_notes: "Tasks can loop over lists using the with_items keyword. Each item in the list will be treated as a separate task, and you can use the special item variable name to access the current item. (Note: apt/yum modules collapse a list into a single package management transaction for speed)

          There are some other looping keywords, too. See http://docs.ansible.com/playbooks_loops.html for more.

          Class question: when would you need to use some of the other loop keywords, like with_together, with_sequence,with_random_choice, etc?"

      - 
        - h1: "Status Control"
        - ul:
          - failed_when
          - changed_when

        - class_notes: "Ansible tasks can return a few different states: \"OK\" means that the task completed successfully but didn'/.t change anything on the target system. \"Changed\" means that the task completed, and changed something. \"Failed\" means that the task failed. (duh)

          When you're using \"command\" or \"shell\" to issue commands on the remote system, Ansible will detect the return code of the command. If it's non-zero, Ansible will treat it as a failure, but sometimes that's not what you want. There may be other circumstances with other modules where you see a change or a failure but want to continue on, or mark that task as just \"ok\", with no change. There are two keywords to control this. failed_when and changed_when. These work like the \"when\" keyword, but control the status of the task. For instance.

            - name: this command prints FAILED when it fails
              command: /usr/bin/example-command -x -y -z
              register: command_result
              failed_when: \"'FAILED' in command_result.stderr\"
            This will treat the command as a failure only when the string \"FAILED\" exists in the stderr of the command output.

            Some examples of changed_when:

              - shell: /usr/bin/billybass --mode=\"take me to the river\"
                register: bass_result
                changed_when: \"bass_result.rc != 2\"

              # this will never report 'changed' status
              - shell: wall beep
                changed_when: False
          "
      -
        - h1: Local actions
        - ul:
          - local_action (task)
          - "connection: local (play)"

        - class_notes:
            "Most Ansible tasks (actions) run on a remote machine: a Python program is assembled and sent across to the remote server, run, and the response is returned. But for some tasks, like API calls to remote services, it doesn't make sense to run that task on a remote machine--this is what local actions are for. This runs the task locally on the Ansible machine, but still \"on behalf\" of the machine currently being operated upon."

      -
        - h1: Delegation
        - p: Run a task on another server, on <i>behalf</i> of the server we are currently operating on.

        - class_notes: A delegated task is similar. You can be running a play that operates upon, say, "webservers", but for a particular task within that play, run the action on a different server. As an example, you may be going through an app deployment on the webservers group, but you may need to contact the monitoring server to turn off monitoring for that host while it's being updated. So, you would want to delegate_to a different server, in a play ordinarily targeting webservers.
