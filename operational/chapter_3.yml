---
header:
  author: Mike Martin, Justin Phelps, Paul Durivage, Jesse Keating
  title: Chapter 3, Using Ansible for Ad-hoc Commands
  description: Ansible Operational Course

slides: 
  -
    - nested:
      - 
        - h1: Ansible Ad-Hoc Commands
        - h3: A Review of Hosts, Tasks, and Modules
      -
        - h2: Targeting Hosts
        - ul:
            - all / *
            - Groups (webservers)
            - Exclusion (webservers:!nginxservers)
            - Intersection (webservers:&staging)
            - Combos
            - Hostname / IP
            - Regex
            - "--limit"
        - class_notes: |
            Go over the various methods for targeting hosts for ad-hoc commands. 
            Include information on rolling release and complex targeting.  Use 
            '-i localhost,' for a quick way to target a single host without 
            specifying an inventory file.
      -
        - h2: Executing a task
        - p: ad-hoc commands are single-task executions which leverage modules
      -
        - h2: Modules
        - p: Modules are code that is executed on the remote host
        - class_notes: |
            Discuss how ansible takes module code and bundles it with arguments,
            transfers it to the remote host and executes it (depending on
            connection method).
      -
        - h2: Modules
        - p: Ansible provided core modules are
        - ul:
          - Written in python
          - Are shipped by SSH to the target machine where they are executed
          - Return JSON data that is interpreted by ansible
        - class_notes: Modules can be written in other languages, but core ansible only uses python. We don't need to go into the mechanics of how modules are built before being shipped, just mention that they get copied to the remote machine using SCP/SFTP. The echo out JSON data, which gets interpreted by the ansible "control" machine.
      -
        - h2: Module Documentation
        - code: |
            ansible-doc -l
        - code: |
            ansible-doc setup
            ansible-doc copy
        - class_notes: |
            ansible-doc -l lists all the modules. ansible-doc <module-name> 
            to see the documentation for a specific module. The ansible-doc 
            command makes it extremely easy to see all of the available ansible 
            modules with corresponding documentation and examples.
      -
        - h2: Example Use Cases
        - p: Rebooting all servers
        - code: |
            ansible all -m command -a "/sbin/reboot"
        - class_notes: |
            This is a simple command that uses the command module to issue a reboot
            to all servers in your inventory.
            The -m dictates the module, the -a for arguments.
      -
        - h2: Example Use Cases
        - p: Setting fork level to 10
        - code: |
            ansible webservers -f 10 -m setup
        - class_notes: |
            Fork level means that Ansible will fork 10 times, and then reach out
            to up to 10 machines concurrently.  Choose carefully the level of concurrency:
            higher concurrency executes tasks/plays/playbooks faster, but results in more 
            resources being consumed.  
      -
        - h2: Example Use Cases
        - p: Copy a file from the local host to inventory hosts
        - code: |
            ansible dbservers -m copy -a "src=/path/to/file dest=/path/to/dest"
        - class_notes: |
            Uses the copy module to copy a file from the local machine, where the ansible
            command is being run, to the destination.
      -
        - h2: Example Use Cases
        - p: Install nginx and add a user
        - code: |
            ansible all -m apt -a "pkg=nginx state=present"
            ansible all -m user -a "name=bob state=present"
        - class_notes: |
            Very simple; this uses the apt module to install nginx, and uses
            the user module to add user bob.
      -
        - h2: Example Use Cases
        - p: Cloning a git repo to a path
        - code: |
            ansible appservers -m git -a "repo=https://github.com/ansible/ansible dest=/home/user/ansible"
        - class_notes: |
            This is cloning a repo to a directory, optionally accepting tags and versions.  Allows you
            to install software (or anything stored in Git) from source control, a cornerstone 
            piece of functionality for any automation/config mgmt/orchestration tool.
      -
        - h2: Example Use Cases
        - p: Ensure httpd is started
        - code: |
            ansible -m service -a "name=httpd state=started"
        - class_notes: |
            The service module is used to ensure httpd is started.  It does not restart, stop, reload
            or do anything but check that the process is running; if it is not running, it starts.
      -    
        - h2: Example Use Cases
        - p: Backgrounding tasks, with optional polling every 60 seconds
        - code: |
            ansible all -B 3600 -a "/usr/bin/long_running_operation --do-stuff"
            ansible all -B 1800 -P 60 -a "/usr/bin/long_running_operation --do-stuff"
        - class_notes: |
            Initiate long running tasks with polling.  Optionally kick off long running tasks
            with backgrounding and no polling, returning you to the shell, with the option of
            checking back in on the operation by setting -P to 0, which is otherwise a default of 15.
      -
        - h2: Example Use Cases
        - p: Running setup module to gather and display all facts about a machine known to Ansible
        - code: |
            ansible web1.example.com -m setup
        - class_notes: |
            Gathers a very large JSON object's worth of data about servers, to include
            network information, distro information, shell environment, devices,
            CPU, memory, etc.  All facts returned by setup are prefixed with ansible_
      -
        - h2: Cowsay
        - image: 'http://i.imgur.com/rRBp5Ln.png?1'
        - class_notes: |
            Cowsay is used by default if enabled on the system, but can be disabled
            permanently in the ansible.cfg file, or skill installation of cowsay.



