---
header:
  author: Tim G
  title: Chapter Title
  description: Description of the chapter

slides:

  -
    - nested:

      -
        - h1: Variable Inclusion
        - h3: How to properly use include_vars and vars_files to include variables in your playbooks

      -
        - h1: vars_files
        - p: "vars_files is used in playbooks to include a file of variables outside of the usual variable locations"
        - ul:
          - Useful for keeping secrets and site specific data outside of your Ansible repository and version control
          - Not available for usage within roles, for that you will need the include_vars module

        - class_notes:
            The vars_files directive is useful because it allows for you to keep secrets and business specific data in a location outside your Ansible repository.  This allows you to keep your Ansible playbooks very generic and portable.  This means you can continue to benefit from changes upstream if it is a community contributed playbook, or you can safely push out updates to the playbook if you are contributing it to the community.  Ultimately the variable include mechanisms are to provide flexibility in where your variables are located.

      -
        - h1: include_vars
        - p: "The include_vars module is similar to vars_files and allows for dynamic inclusion of variables within the context of a role."
        - ul:
          - |
            <strong>include variables based on the target Linux Distribution</strong><br>
            include_vars: "../vars/{{ansible_os_family}}.yml"

          - |
            <strong>include a directory of variable fragments</strong><br>
            include_vars: "{{ item }}.yml"<br>
            with_fileglob: "../vars/*.yml"

        - class_notes:
            The include_vars module is very similar to vars_files, however include_vars is a module which means it can be used within the context of a role, whereas vars_files cannot.  Some example use cases of include_vars are shown here, in the first example include_vars is used to pull in variables based upon the Linux distribution in use.  In the second example include_vars is being used to collect a series of variables files from a directory.  Don't think of these as the "correct" ways to handle variables, but rather as yet another tool at your disposal for flexibility when needed.
