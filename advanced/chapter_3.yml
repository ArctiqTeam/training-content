---
header:
  author: Justin Phelps
  title: Variable Types and Precedence
  description: Understanding variables and precedence.

slides:

  -
    - nested:
      - 
        - h1: "Variable Types and Precedence"
        - p: What is your variable and where does it go?
      - 
        - h2: "Where variables are defined or sourced"
        - ul:
          - Inventory
          - Playbook
          - Files and Roles
          - Command Line
          - Facts
        - class_notes: |
                This chapter will be about Variable Types and Precedence.
                It will also touch a bit on Jinja2 and Roles.
      -
        - h2: "Variable Precedence"
        - p: "Variables will override each other depending on where they are defined:"
        - ol:
          - Command line variables have the highest precedence.
          - "'most everything else' come next."
          - Variables defined in inventory.
          - Next comes facts discovered about a system.
          - Role defaults lose in priority to everything else.
        - class_notes: |
                Ansible says you shouldn't really care about variable precedence.
                Put things where you want, and it should 'just work'.
      -
        - h2: "Defining Variables"
        - p: Let's go over the various locations you can define variables.
        - class_notes: |
                The next slides will contain details on the various variable locations.
      -
        - h2: "Inventory"
        - p: "There are a couple of methods for defining variables in your inventory:"
        - code: |
            localhost ansible_connection=local

            [web]
            web1.example.com ansible_ssh_port=5555 ansible_ssh_host=192.168.1.50
            web2.example.com ansible_ssh_user=mdehaan

            [db]
            db01.example.com mysql_max_connections=100

            [web:vars]
            apache_max_clients=100
        - class_notes: |
                There are a few examples here:
                  * The ansible ssh and connection options.
                  * A plain variable override for a specific host (mysql)
                  * A group variable override for the web group.
      -
        - h2: "Playbook"
        - p: "Here is an example of defining variables in a playbook:"
        - code: |
            - hosts: webservers
              vars:
                http_port: 80
        - class_notes: |
                This shows a simple vars example as defined at the beginning of a play.
      -
        - h2: "Command Line"
        - p: "You can also override variables from the command line:"
        - code: |
            ansible-playbook release.yml --extra-vars "version=1.23.45 other_var=foo"
        - class_notes: |
                Here is how you override variables on the command line.
                Ask the class what they think the short flag is?
                -e is the short flag.
      -
        - h2: "Including Variable Files"
        - p: "Here is an example of including a variable file based on a condition:"
        - code: |
                - name: Includiung OS specific variables
                  include_vars: '{{ ansible_os_family }}.yml'
        - class_notes: |
                What value do the students thing the ansible_os_family variable references?
                This is typically Debian or RedHat for most systems.
      -
        - h2: "Roles"
        - p: "Ansible Roles also have variables that can be defined:"
        - ul:
          - "Rolename/vars contains variables that should stay internal to the role."
          - "Rolename/defaults contains variables that can be overridden."
        - class_notes: |
                The roles chapter will dig into this a lot more.
                The main point is defaults are meant to be overridden.
      -
        - h2: "Facts"
        - p: "System facts are sourced from the following sources:"
        - ul:
          - setup module
          - set_fact
          - facts.d
        - class_notes: |
                The files placed in facts.d are processed by the setup module.
                aka, the Gathering Facts step.
      -
        - h2: "Setup Module"
        - p: "Run the setup module against your local machine to see what returns."
        - code: |
                ansible localhost -m setup --connection=local
        - class_notes: |
                Have students run this on their ansible server.
                This requires an inventory file with 'localhost' defined.
                /etc/ansible/hosts
      -
        - h2: "Discovered Facts"
        - p: "Here is a sampling of facts discovered by the setup module:"
        - code: |
              ...
              "ansible_all_ipv4_addresses": [
                  "REDACTED IP ADDRESS"
              ],
              "ansible_all_ipv6_addresses": [
                  "REDACTED IPV6 ADDRESS"
              ],
              "ansible_architecture": "x86_64",
              "ansible_bios_date": "09/20/2012",
              "ansible_bios_version": "6.00",
              "ansible_cmdline": {
                  "BOOT_IMAGE": "/boot/vmlinuz-3.5.0-23-generic",
                  "quiet": true,
                  "ro": true,
                  "root": "UUID=4195bff4-e157-4e41-8701-e93f0aec9e22",
                  "splash": true
              },
              "ansible_date_time": {
                  "date": "2013-10-02",
                  "day": "02",
                  "epoch": "1380756810",
                  "hour": "19",
                  "iso8601": "2013-10-02T23:33:30Z",
                  "iso8601_micro": "2013-10-02T23:33:30.036070Z",
                  "minute": "33",
                  "month": "10",
                  "second": "30",
                  "time": "19:33:30",
                  "tz": "EDT",
                  "year": "2013"
              },
              "ansible_default_ipv4": {
                  "address": "REDACTED",
                  "alias": "eth0",
                  "gateway": "REDACTED",
                  "interface": "eth0",
                  "macaddress": "REDACTED",
                  "mtu": 1500,
                  "netmask": "255.255.255.0",
                  "network": "REDACTED",
                  "type": "ether"
              },
              ...
        - class_notes: |
                Ask your students to find a useful variable and think about how they
                would use it?
                There is a ton of useful variables when you run the setup module.
                You can make intelligent decisions in your plays based on this
                information.
      - 
        - h2: "Discovered Facts"
        - p: "Here is how you reference these variables:"
        - code: |
            {{ ansible_devices.sda.model }}
            {{ ansible_hostname }}
        - class_notes: |
                Make note of how you reference embedded variables with the dot notation.
      -
        - h2: "Setting Facts in a Play"
        - p: "You can set facts manually in a play:"
        - code: |
            # Example setting host facts using key=value pairs
            - set_fact: one_fact="something" other_fact="{{ local_var * 2 }}"
            
            # Example setting host facts using complex arguments
            - set_fact:
                 one_fact: something
                 other_fact: "{{ local_var * 2 }}"
        - class_notes: |
                This shows the two main ways to define variables.
                The key=value style, and the complex style.
      -
        - h2: "Local Facts (Facts.d)"
        - p: "You can place files ending in '.fact' in the /etc/ansible/facts.d directory. These can be JSON, INI, or executable files. Here is an example file:"
        - code: |
            [general]
            asdf=1
            bar=2
        - p: "And here is how you reference the asdf variable."
        - code: |
            {{ ansible_local.preferences.general.asdf }}
        - class_notes: |
            The code sample shows the file to be dropped,
            and the way to reference that variable in templates and plays.
            What type of facts would students put in facts.d?
            Maybe something like master or cluster status?
      -
        - h2: "Using Variables in Jinja2"
        - p: "You've seen several examples of variables being referenced. The same method is used to reference these variables in Jinja2 templates."
        - code: |
                {{ variable_name }}
        - class_notes: |
                Most students should have figured this out by now. We are about to
                introduce the filters in Jinja though, so it is worth revisiting this.
      -
        - h2: "Jinja2 Filters" 
        - p: "There are many useful filters you can use in your Jinja2 templates. Here are a few useful ones:"
        - code: |
                # Combine two lists
                {{ list1 | union(list2) }}
                
                # Get a random number
                {{ 59 | random }} * * * * root /script/from/cron
                
                # md5sum of a filename
                {{ filename | md5 }}
                
                # Comparisons
                {{ ansible_distribution_version | version_compare('12.04', '>=') }}
        - class_notes: |
                Ask students to find a filter that makes a variable all lowercase.
                ie, Ubuntu => ubuntu
                {{ variable | lower }} is the answer.
                There are a lot more filters out there.
                Reference the Ansible and Jinja2 documentation for a complete list.
      - 
        - h2: "Defaulting Values"
        - p: "You can provide a default value for a variable using the following filter:"
        - code: |
                {{ some_variable | default("foobar") }}
        - class_notes: |
                Defaulting values is a great way to deal with undefined variables.
                It allows you have to have some sane defaults in your templates,
                but allow them to be easily overridden.
      -
        - h2: "Magic Variables"
        - p: "Ansible provides information about other hosts though a series of 'magic variables'."
        - ul:
          - hostvars
          - group_names
          - groups
        - class_notes: |
                Ansible provides these for you automatically.
                These three are the most important.
                Don't use these names as they are reserved.
                'environment' is also reserved.
      -
        - h2: "hostvars"
        - p: "Hostvars let you ask about the variables of another host, including facts that have been gathered about that host."
        - code: |
                {{ hostvars['test.example.com']['ansible_distribution'] }}
        - class_notes: |
                Where would this be useful?
                Grabbing an IP address of another host would be an example.
                This specific example will give you the value of
                ansible_distribution from the host test.example.com.
                This doesn't have to run on test.example.com to retrieve this value.
      -
        - h2: "group_names"
        - p: "The group_names variable contains a list of all the groups the current host is in."
        - code: |
            {% if 'webserver' in group_names %}
               # some part of a configuration file that only applies to webservers
            {% endif %}
        - class_notes: |
                Why would you use this method?
                Apply actions to a host based on it's group. ie, MySQL slave readonly=1
                This example checks the current host is in the webserver group.
                If it is, the information between the blocks will be rendered.
      - 
        - h2: "groups"
        - p: "groups is a list of all the groups (and hosts) in the inventory."
        - code: |
            {% for host in groups['app_servers'] %}
               # something that applies to all app servers.
            {% endfor %}
        - class_notes: |
                This would allow you to work with all the app servers.
                Where would your students use this?
                A good example would be listing all your app servers in
                your haproxy configuration.
      -
        - h2: "Lab"
        - p: Given this play, override the local_var variable using the command line flag.
        - code: |
                - hosts: localhost
                  connection: local
                  vars:
                    - local_var: "override me"
                  tasks:
                    - name: print out the variable
                      debug: msg="This should not output 'override me' - {{ local_var }}"
        - class_notes: |
                Students should override the variable without changing the play file itself.
      -
        - h2: "Lab Solution"
        - code: |
                ansible-playbook variable_override.yml --extra-vars "local_var=foobar"
        - class_notes: |
                Students could have also used -e instead of the full option.
      -
        - h2: "Lab Output"
        - code: |

                PLAY [localhost] ************************************************************** 

                GATHERING FACTS *************************************************************** 
                ok: [localhost]

                TASK: [print out the variable] ************************************************ 
                ok: [localhost] => {
                    "msg": "This should not output 'override me' - foobar"
                }

                PLAY RECAP ******************************************************************** 
                localhost                  : ok=2    changed=0    unreachable=0    failed=0
        - class_notes: |
                The important bit here is the replaced value at the end of the msg line.
