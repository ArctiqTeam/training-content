---
header:
<<<<<<< HEAD
  author: DFed 
  title: Connection Types
  description: Chapter detailing various Connection Types within ansible
=======
  author: Justin Phelps
  title: Variable Types and Precedence
  description: Understanding variables and precedence.
>>>>>>> FETCH_HEAD

slides:

  -
    - nested:
      - 
        - h1: "Variable Types and Precedence"
      - 
        - h2: "Where variables are defined or sourced:"
        - ul:
          - Inventory
          - Playbook
          - Files and Roles
          - Command Line
          - Facts
        - class_notes: 
      -
        - h2: "Variable Precedence"
        - p: "Variables will override each other depending on where they are defined:"
        - ol:
          - Command line variables have the highest precedence.
          - "'most everything else' come next."
          - Variables defined in inventory.
          - Next comes facts discovered about a system.
          - Role defaults lose in priority to everything else.
        - class_notes:
      -
        - h2: "Defining Variables"
        - p: Let's go over the various locations you can define variables.
        - class_notes:
      -
        - h2: "Inventory"
        - p: "There are a couple of methods for defining variables in your inventory:"
        - code: |
            localhost ansible_connection=local
            [web]
            web1.example.com ansible_ssh_port=5555 ansible_ssh_host=192.168.1.50
            web2.example.com ansible_ssh_user=mdehaan
            [db]
            db01.example.com mysql_max_connections=100
            [web:vars]
            apache_max_clients=100
        - class_notes: |
                There are a few examples here:
                  * The ansible ssh and connection options.
                  * A plain variable override for a specific host (mysql)
                  * A group variable override for the web group.
      -
        - h2: "Playbook"
        - p: "Here is an example of defining variables in a playbook:"
        - code: |
            - hosts: webservers
              vars:
                http_port: 80
        - class_notes:
      -
        - h2: "Command Line"
        - p: "You can also override variables from the command line:"
        - code: |
            ansible-playbook release.yml --extra-vars "version=1.23.45 other_variable=foo"
        - class_notes:
      -
        - h2: "Including Variable Files"
        - p: "Here is an example of including a variable file based on a condition:"
        - code: |
                - name: Includiung OS specific variables
                  include_vars: '{{ ansible_os_family }}.yml'
        - class_notes: |
                This example includes a file based on the ansible_os_family variable. This is typically Debian or RedHat for most systems.
      -
        - h2: "Roles"
        - p: "Ansible Roles also have variables that can be defined:"
        - ul:
          - "vars/main.yml contains variables that should stay internal to the role."
          - "defaults/main.yml contains variables that can be overridden."
        - class_notes:
      -
        - h2: "Facts"
        - p: "System facts are sourced from the following sources:"
        - ul:
          - setup module
          - set_fact
          - facts.d
        - class_notes: |
      -
        - h2: "Discovered Facts"
        - p: "Here is a sampling of facts discovered by the setup module:"
        - code: |
              ...
              "ansible_all_ipv4_addresses": [
                  "REDACTED IP ADDRESS"
              ],
              "ansible_all_ipv6_addresses": [
                  "REDACTED IPV6 ADDRESS"
              ],
              "ansible_architecture": "x86_64",
              "ansible_bios_date": "09/20/2012",
              "ansible_bios_version": "6.00",
              "ansible_cmdline": {
                  "BOOT_IMAGE": "/boot/vmlinuz-3.5.0-23-generic",
                  "quiet": true,
                  "ro": true,
                  "root": "UUID=4195bff4-e157-4e41-8701-e93f0aec9e22",
                  "splash": true
              },
              "ansible_date_time": {
                  "date": "2013-10-02",
                  "day": "02",
                  "epoch": "1380756810",
                  "hour": "19",
                  "iso8601": "2013-10-02T23:33:30Z",
                  "iso8601_micro": "2013-10-02T23:33:30.036070Z",
                  "minute": "33",
                  "month": "10",
                  "second": "30",
                  "time": "19:33:30",
                  "tz": "EDT",
                  "year": "2013"
              },
              "ansible_default_ipv4": {
                  "address": "REDACTED",
                  "alias": "eth0",
                  "gateway": "REDACTED",
                  "interface": "eth0",
                  "macaddress": "REDACTED",
                  "mtu": 1500,
                  "netmask": "255.255.255.0",
                  "network": "REDACTED",
                  "type": "ether"
              },
              ...
        - class_notes: |
      - 
        - h2: "Discovered Facts"
        - p: "Here is how you reference these variables:"
        - code: |
            {{ ansible_devices.sda.model }}
            {{ ansible_hostname }}
      -
        - h2: "Setting Facts in a Play"
        - p: "You can set facts manually in a play:"
        - code: |
            # Example setting host facts using key=value pairs
            - set_fact: one_fact="something" other_fact="{{ local_var * 2 }}"
            
            # Example setting host facts using complex arguments
            - set_fact:
                 one_fact: something
                 other_fact: "{{ local_var * 2 }}"
        - class_notes:
      -
        - h2: "Local Facts (Facts.d)"
        - p: "You can place files ending in '.fact' in the /etc/ansible/facts.d directory. These can be JSON, INI, or executable files. Here is an example file:"
        - code: |
            [general]
            asdf=1
            bar=2
            
            {{ ansible_local.preferences.general.asdf }}
        - class_notes: |
            The code sample shows the file to be dropped, and the way to reference that variable in templates and plays.
      -
        - h2: "Using Variables in Jinja2"
        - p: "You've seen several examples of variables being referenced. The same method is used to reference these variables in Jinja2 templates."
        - code: |
                {{ variable_name }}
        - class_notes: |
      -
        - h2: "Jinja2 Filters" 
        - p: "There are many useful filters you can use in your Jinja2 templates. Here are a few useful ones:"
        - code: |
                # Combine two lists
                {{ list1 | union(list2) }}
                
                # Get a random number
                {{ 59 |random}} * * * * root /script/from/cron
                
                # md5sum of a filename
                {{ filename | md5 }}
                
                # Comparisons
                {{ ansible_distribution_version | version_compare('12.04', '>=') }}
        - class_notes: |
                There are a lot more filters out there. Reference the Ansible and Jinja2 documentation for a complete list.
      - 
        - h2: "Defaulting Values"
        - p: "You can provide a default value for a variable using the following filter:"
        - code: |
                {{ some_variable | default("foobar") }}
        - class_notes: |
      -
        - h2: "Magic Variables"
        - p: "Ansible provides information about other hosts though a series of 'magic variables'."
        - ul:
          - hostvars
          - group_names
          - groups
        - class_notes: |
      -
        - h2: "hostvars"
        - p: "Hostvars let you ask about the variables of another host, including facts that have been gathered about that host."
        - code: |
                {{ hostvars['test.example.com']['ansible_distribution'] }}
        - class_notes: |
      -
        - h2: "group_names"
        - p: "The group_names variable contains a list of all the groups the current host is in."
        - code: |
            {% if 'webserver' in group_names %}
               # some part of a configuration file that only applies to webservers
            {% endif %}
        - class_notes:
      - 
        - h2: "groups"
        - p: "groups is a list of all the groups (and hosts) in the inventory."
        - code: |
            {% for host in groups['app_servers'] %}
               # something that applies to all app servers.
            {% endfor %}
        - class_notes:
      -
        - h2: "Lab"
        - p: Given the provided play, override the variable to change the output.
        - code: |
                - hosts: localhost
                  connection: local
                  vars:
                    - local_var: "override me"
                  tasks:
                    - name: print out the variable
                      debug: msg="This should not output 'override me' - {{ local_var }}"
        - class_notes: |
      -
        - h2: "Lab Solution"
        - code: |
                ansible-playbook variable_override.yml --extra-vars "local_var=foobar"

                PLAY [localhost] ************************************************************** 

                GATHERING FACTS *************************************************************** 
                ok: [localhost]

                TASK: [print out the variable] ************************************************ 
                ok: [localhost] => {
                    "msg": "This should not output 'override me' - foobar"
                }

                PLAY RECAP ******************************************************************** 
                localhost                  : ok=2    changed=0    unreachable=0    failed=0
        - class_notes: |
