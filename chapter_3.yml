---
header:
  author: Jesse K and DFed
  title: Understand the concepts of Ansible
  description: Description of the chapter

slides:

  -
    - nested:
      - 
        - h1: Understand the concepts of Ansible
        - h3: Getting to know the components that makes up Ansibe

      - 
        - h1: Topics covered in this slide
        - ul:
          - Inventory
          - Modules/Tasks
          - Plays
          - Playbooks

      -
        - h1: Inventory
        - p: | 
            Ansible works against multiple systems in your infrastructure
            at the same time. It does this by selecting portions of systems
            listed in Ansible's inventory. This topic covers:
        - ul:
          - Understanding Hosts and Groups
          - Inventory Sources

      -
        - h1: Inventory (continued)
        - ul:
          - hosts
          - groupings
          - inventory-specific data
          - static or dynamic sources
        - class_notes: "Breaking down by topic, we'll cover four parts (Note the listed)"

      -
        - h1: "Inventory: Hosts"
        - p: "Things you can do with host entries in Inventory:"
        - ul:
          - Hosts can have host-specific attributes specified for Ansible to use.
          - Things such as static IP addresses, FQDN, alternate SSH ports can be set.
          - Set remote user to ssh as, and what sudo user you want to use per host.
          - Set connection types to the host (Paramiko, OpenSSH, local connection, etc.)
          - --limit allows you to specify only certain host entries to act against
        - class_notes: |
            You have a lot of flexibility when you specify hosts in Inventory. You can
            set variables to determine connection types, host ip addresses and fully-qualified
            domain names, remote users and sudo users as well as any other variable you may 
            come up with to use when interacting with your hosts, such as "apache_port" or 
            "mysql ports".

      -
        - h1: "Inventory: Hosts (Continued)"
        - p: "This is an example of a host entry in an inventory file:"
        - code: |
            web1.example.com ansible_ssh_port=5555 ansible_ssh_host=192.168.1.50
        - class_notes: As you can see, we have a host name, a specified SSH port and IP Address.

      -
        - h1: "Inventory: Host Entries Using Ranges."
        - p: "You can have ranges of machine names or letters like this:"
        - code: |
            www[01:50].example.com ansible_ssh_port=5555
            db-[a-f].example.com ansible_ssh_port=5555
        - class_notes: Here we see that we can bracket a range of alpha-numeric characters to shorten our entries in the file.

      -
        - h1: "Inventory: Groups"
        - p: "Inventory Host Organization: Groups"
        - ul:
          - Groups allow targeted operations against different types of hosts.
          - Groups can also have variables that apply to all hosts within them.
          - --limit allows you to specify only certain groups to act against
        - class_notes: |
            We can also act against groups of hosts in a similar manner to single hosts.
            This allows you to also have standard settings for lots of similar hosts, such
            as a standard set of ports for apache on all web servers. You can limit the execution of
            Ansible jobs just as you can single hosts with the "--limit" option.

      -
        - h1: "Inventory: Groups (Continued)"
        - p: Groups are represented in brackets above host lists in the inventory file.
        - code: |
            [webservers]
            www[01:50].example.com ansible_ssh_port=5555 

      - 
        - h1: Tasks and Modules
        - p: Tasks and Modules are the workhorse of Ansible.
        - p: "This topic will cover:"
        - ul:
          - Understanding what a task is
          - Understanding how tasks make use of modules
      -
        - h1: Tasks
        - p: A task is a discrete action that is a declaration about
             the state of a system.
        - p: "Example Tasks:"
        - ul:
          - Directory should exist
          - Package should be installed
          - Service should be running
          - Cloud Instance should exist
      -
        - h1: "Tasks: Examples"
        - p: "Code examples of simple tasks:"
        - code: |
            - name: add cache dir
              file: path=/opt/cache state=directory

            - name: install nginx
              yum: name=nginx state=present

            - name: start nginx
              service: name=nginx enabled=yes state=started
      -
        - h1: "Tasks: Sources"
        - p: "Code for tasks can come from:"
        - ul:
          - existing modules
          - custom modules
          - raw ssh commands
      -
        - h1: Modules
        - p: Modules are the bits of code copied to the target system
             to be executed to satisfy the task declaration.
        - p: "Key points:"
        - ul:
          - Code need not exist on remote host -- ansible copies it over
          - Many modules come with Ansible -- batteries included
          - Custom modules can be developed easily
          - command/shell modules exists for simple commands
          - script module exists for using existing code
          - raw module exists for executing raw commands over ssh
      -
        - h1: Module Interactions
        - p: ansible can execute single modules on sets of hosts
             to fullfill an ad-hoc task
        - code: |
            $ ansible web-hosts -m service -a "name=nginx state=restarted"
        - p: Module listing and documentation via ansible-doc
        - code: |
            $ ansible-doc -l
            acl                  Sets and retrieves file ACL information.
            apt                  Manages apt-packages
        - code: |
            $ ansible-doc acl
            > ACL

              Sets and retrieves file ACL information.
        - class_notes: Modules and tasks represent the core function of
                       ansible. Modules are capable of idempotence -- 
                       can be ran successively and understand change vs
                       no change. An ordered series of tasks can be described
                       to form a play
